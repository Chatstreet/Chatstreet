{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Chatstreet-Backend-MiSe",
    "description": "Micro-Service for the Chatstreet backend application."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Miscellaneous",
      "description": "Endpoints for any other services."
    },
    {
      "name": "Authentication",
      "description": "Endpoints for all of the authentication related actions."
    }
  ],
  "schemes": ["http", "https"],
  "securityDefinitions": {
    "apiKeyAuth": {
      "type": "apiKey",
      "in": "jwt",
      "name": "JWT",
      "description": "All routes on **/secure/** are secured by the authentication (see authentication)."
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/api/v1/health": {
      "get": {
        "tags": ["Miscellaneous"],
        "description": "Check the servers health status.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Healthy response from server.",
            "schema": {
              "$ref": "#/definitions/GetHealthResponseSuccess"
            }
          }
        }
      }
    },
    "/api/v1/token/auth": {
      "post": {
        "tags": ["Authentication"],
        "description": "Client authentication via email or username, tag and password.",
        "parameters": [
          {
            "name": "Username & tag authentication",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostAuthRequestUsernameTag"
            }
          },
          {
            "name": "Email authentiaction",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostAuthRequestEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in. Client can now access secure endpoints.",
            "schema": {
              "$ref": "#/definitions/PostAuthResponseSuccess"
            }
          },
          "400": {
            "description": "Bad Request, check your json request body.",
            "schema": {
              "$ref": "#/definitions/PostAuthResponseBadRequest"
            }
          },
          "401": {
            "description": "The credentials of your request are unknown to the server.",
            "schema": {
              "$ref": "#/definitions/PostAuthResponseUnauthorized"
            }
          },
          "500": {
            "description": "Internal server error (normally doesn't occure)",
            "schema": {
              "$ref": "#/definitions/PostAuthResponseInternalServerError"
            }
          }
        }
      }
    },
    "/api/v1/token/verify": {
      "get": {
        "tags": ["Authentication"],
        "description": "Used to determine wether the user is still authenticated.",
        "parameters": [],
        "responses": {
          "500": {
            "description": "Internal server error (normally doesn't occure)",
            "schema": {
              "$ref": "#/definitions/GetVerifyResponseInternalServerError"
            }
          },
          "200 - Valid": {
            "description": "The token provided by the request hearder is valid.",
            "schema": {
              "$ref": "#/definitions/GetVerifyResponseSuccess"
            }
          },
          "200 - No Token": {
            "description": "The client does not provide a token in the authorization header.",
            "schema": {
              "$ref": "#/definitions/GetVerifyResponseSuccessNoToken"
            }
          },
          "200 - Invalid": {
            "description": "The token provided by the request header is invalid.",
            "schema": {
              "$ref": "#/definitions/GetVerifyResponseSuccessInvalidToken"
            }
          }
        }
      }
    },
    "/api/v1/token/register": {
      "post": {
        "tags": ["Authentication"],
        "description": "Used to create a new account for a user.",
        "parameters": [
          {
            "name": "Registration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostRegisterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully registered a new user.",
            "schema": {
              "$ref": "#/definitions/PostRegisterResponseSuccess"
            }
          },
          "400": {
            "description": "Bad Request, check your json request body.",
            "schema": {
              "$ref": "#/definitions/PostRegisterResponseBadRequest"
            }
          },
          "500": {
            "description": "The user already exists.",
            "schema": {
              "$ref": "#/definitions/PostRegisterResponseInternalServerError"
            }
          }
        }
      }
    },
    "/api/v1/token/refresh": {
      "get": {
        "tags": ["Authentication"],
        "description": "Used to refresh the access token.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The access token has been refreshed.",
            "schema": {
              "$ref": "#/definitions/GetRefreshResponseSuccess"
            }
          },
          "400": {
            "description": "Bad Request, check your json request body.",
            "schema": {
              "$ref": "#/definitions/GetRefreshResponseBadRequest"
            }
          },
          "401": {
            "description": "The refresh token is invalid. Authentication is required.",
            "schema": {
              "$ref": "#/definitions/GetRefreshResponseUnauthorized"
            }
          },
          "500": {
            "description": "Internal server error (normally doesn't occure)",
            "schema": {
              "$ref": "#/definitions/GetRefreshResponseInternalServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GetHealthResponseSuccess": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "type": "object",
          "properties": {
            "health": {
              "type": "string",
              "example": "ok"
            }
          }
        }
      }
    },
    "PostAuthRequestUsernameTag": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "NekroQuest"
        },
        "tag": {
          "type": "string",
          "example": "7331"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "PostAuthRequestEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "nekroquest@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "PostRegisterRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "NekroQuest"
        },
        "firstName": {
          "type": "string",
          "example": "David"
        },
        "lastName": {
          "type": "string",
          "example": "Abderhalden"
        },
        "email": {
          "type": "string",
          "example": "nekroquest@gmail.com"
        },
        "recoveryEmail": {
          "type": "string",
          "example": "nikolaus@hispeed.ch"
        },
        "phoneNumber": {
          "type": "string",
          "example": "+41791001010"
        },
        "birthdate": {
          "type": "string",
          "example": "4/18/04"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "PostAuthResponseSuccess": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "$ref": "#/definitions/PostAuthResponseDataSuccess"
        }
      }
    },
    "PostAuthResponseDataSuccess": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "NekroQuest"
        },
        "tag": {
          "type": "number",
          "example": 7331
        },
        "email": {
          "type": "string",
          "example": "nekroquest@gmail.com"
        },
        "role": {
          "type": "string",
          "example": "USER"
        }
      }
    },
    "PostAuthResponseBadRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "validation-error"
        },
        "error": {
          "$ref": "#/definitions/ZodValidationError"
        },
        "data": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "nekroquest@gmail.com"
            }
          }
        }
      }
    },
    "PostAuthResponseUnauthorized": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "Invalid credentials"
        }
      }
    },
    "PostAuthResponseInternalServerError": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "An unexpected server error occured."
        }
      }
    },
    "GetVerifyResponseSuccess": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "$ref": "#/definitions/GetVerifyResponseDataSuccess"
        }
      }
    },
    "GetVerifyResponseDataSuccess": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "NekroQuest"
        },
        "tag": {
          "type": "number",
          "example": 7331
        },
        "email": {
          "type": "string",
          "example": "nekroquest@gmail.com"
        },
        "role": {
          "type": "string",
          "example": "USER"
        },
        "exp": {
          "type": "number",
          "example": 1689596690
        },
        "iat": {
          "type": "number",
          "example": 1689595790
        }
      }
    },
    "GetVerifyResponseSuccessNoToken": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "error"
            },
            "error": {
              "type": "string",
              "example": "No token provided"
            }
          }
        }
      }
    },
    "GetVerifyResponseSuccessInvalidToken": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "example": "error"
            },
            "error": {
              "type": "string",
              "example": "Token is invalid"
            }
          }
        }
      }
    },
    "GetVerifyResponseInternalServerError": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "An unexpected server error occured."
        }
      }
    },
    "PostRegisterResponseSuccess": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "example": "Example"
            },
            "tag": {
              "type": "number",
              "example": 8099
            },
            "firstName": {
              "type": "string",
              "example": "Example"
            },
            "lastName": {
              "type": "string",
              "example": "Example"
            },
            "email": {
              "type": "string",
              "example": "example@example.ch"
            },
            "phoneNumber": {
              "type": "string",
              "example": "+41791001010"
            },
            "birthdate": {
              "type": "string",
              "example": "2004-04-17T22:00:00.000Z"
            }
          }
        }
      }
    },
    "PostRegisterResponseBadRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "validation-error"
        },
        "error": {
          "$ref": "#/definitions/ZodValidationError"
        },
        "data": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "example": "Example"
            },
            "firstName": {
              "type": "string",
              "example": "Example"
            },
            "lastName": {
              "type": "string",
              "example": "Example"
            },
            "email": {
              "type": "string",
              "example": "example@example.ch"
            },
            "phoneNumber": {
              "type": "string",
              "example": "+417941001010"
            },
            "birthdate": {
              "type": "string",
              "example": "4/18/04"
            }
          }
        }
      }
    },
    "PostRegisterResponseInternalServerError": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "ER_DUP_ENTRY: Duplicate entry 'example@example.ch' for key 'email'"
        }
      }
    },
    "GetRefreshResponseSuccess": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-success"
        },
        "data": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "example": "NekroQuest"
            },
            "tag": {
              "type": "number",
              "example": 7331
            },
            "email": {
              "type": "string",
              "example": "nekroquest@gmail.com"
            },
            "role": {
              "type": "string",
              "example": "USER"
            }
          }
        }
      }
    },
    "GetRefreshResponseBadRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "No refresh token provided"
        }
      }
    },
    "GetRefreshResponseUnauthorized": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "Invalid refresh token"
        }
      }
    },
    "GetRefreshResponseInternalServerError": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "http-error"
        },
        "error": {
          "type": "string",
          "example": "An unexpected server error occured."
        }
      }
    },
    "ZodValidationError": {
      "type": "object",
      "properties": {
        "issues": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "custom"
              },
              "path": {
                "type": "array",
                "example": ["parameter"],
                "items": {
                  "type": "string"
                }
              },
              "message": {
                "type": "string",
                "example": "Parameter is mandatory"
              }
            }
          }
        },
        "name": {
          "type": "string",
          "example": "ZodError"
        }
      }
    }
  }
}
